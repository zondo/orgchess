#+title: Mate-in-2 Chess Puzzles
#+subtitle: A Literate Solution with Org
#+author: Glenn Hutchings

#+setupfile: html.org
#+startup: showall hideblocks

#+property: header-args+ :results output
#+property: header-args+ :eval no-export

#+property: header-args:python :session

* Inspiration

Every Wednesday in my town, there's a pub quiz at the Queens Head.
Richard, the landlord, runs a very quirky quiz where the prize hardly ever
goes to the best team.  A typical announcement would be, "Totally chosen at
random by a passing Nun, tonight's Star Prize is a Luxury Deluxe bottle of
Prosecco, going to the team that comes third!".

He also takes out adverts for the pub in a local monthly magazine called
/The Fuddler/.  Every month, along with the advert, there's a mate-in-2
chess puzzle.  Richard is a chess fan; I don't know where he gets the
puzzles from, but they're always quite fiendish.

In the advert puzzle shown below, the Black King is hemmed in and can't
move.  All White needs to do is give check, which looks easy: *RxN*, which
also removes the troublesome Knight, and the King still has nowhere to go.
But there's an escape: *Qf5*, blocking the Rook check.  The Rook can simply
take the Queen, giving check again, but now Black has another escape move:
*Ke4*, since the Bishop is now blocked by the Rook.

And that's as far as I got with this one.

#+name: Fuddler
#+caption: Advert in The Fuddler, November 2022
#+attr_html: :width 60% :align center
#+attr_latex: :width 10cm
[[file:fuddler.png]]

This happens a lot.  Even if I think I've worked out the answer, I'm never
completely sure I haven't missed something.  And, slightly annoyingly,
there's never any answer to the puzzle in the next issue.  But I'd like to
know what I've missed, mainly to get that /Aha!/ moment.  So... I decided
to find some tools to help.

* Lichess

The first thing I looked at was [[https://lichess.org][Lichess]], which is a great free online chess
tool, and accepts board positions in [[https://en.wikipedia.org/wiki/Forsyth%E2%80%93Edwards_Notation][FEN]] format.  For the puzzle above, the
FEN format is:

#+begin_example
5K2/3PRnQB/2p5/3p4/5k2/7q/2N5/4N3 w - - 0 1
#+end_example

You can get it to set up the position like [[https://lichess.org/analysis/standard/5K2/3PRnQB/2p5/3p4/5k2/7q/2N5/4N3#0][this]].  If you turn on Stockfish
analysis mode, it will will come up with a mate in 2:

#+begin_example
1. Ne3
2. Qf5  N3g2#
#+end_example

Hmm.  OK, that's mate, but what if Black had done something different?  I
couldn't figure out how to get any alternative Black moves; maybe I was
missing something.  Lichess has an [[https://lichess.org/api][API]], but it doesn't seem to have
anything to help solve chess puzzles.

* Popeye

Looking around some more, I found another option: [[https://www.chessprogramming.org/Popeye][Popeye]].  Not the sailor,
but a standalone program specifically for solving chess puzzles.  After
installing it, and reading just enough of the arcane [[https://raw.githubusercontent.com/thomas-maeder/popeye/master/py-engl.txt][manual]] to figure out
how to encode the puzzle, I cobbled together this input:

#+name: popeye-input
#+begin_example
Begin
Origin       Fuddler, November 2022
Pieces       White Se1 Sc2 Pd7 Re7 Qg7 Bh7 Kf8
             Black Qh3 Kf4 Pd5 Pc6 Sf7
Option       NoBoard Variation
Stipulation  #2
End
#+end_example

Instead of FEN notation, it lists the Black and White pieces individually
by position.  Strangely, Popeye uses *S* to indicate a Knight instead of
*N*.[fn:1]  It's the =Variation= option which gets all the possible Black
replies; without that, you just get the winning first move.

Feeding it into Popeye, this is what comes out:

#+name: run-popeye
#+begin_src shell :stdin popeye-input :exports results
  popeye | egrep '^ +[0-9]' | sed -e 's/^   //'
#+end_src

#+RESULTS: run-popeye
#+begin_example
1.Sc2-e3 ! zugzwang.
   1...Qh3-f1
       2.Qg7-g4 #
   1...Qh3-g2
       2.Se3*g2 #
   1...Qh3*d7
       2.Se3-g2 #
   1...Qh3-e6
       2.Se3-g2 #
   1...Qh3-f5
       2.Se3-g2 #
   1...Qh3-g4
       2.Qg7*g4 #
   1...Qh3-h1
       2.Qg7-g4 #
   1...Qh3-h2
       2.Qg7-g4 #
   1...Qh3*e3
       2.Re7*f7 #
   1...Qh3-f3
       2.Se1-d3 #
   1...Qh3-g3
       2.Qg7-f6 #
   1...Qh3*h7
       2.Qg7-g4 #
   1...Qh3-h6
       2.Se3-g2 #
   1...Qh3-h5
       2.Se3-g2 #
   1...Qh3-h4
       2.Se3-g2 #
   1...d5-d4
       2.Re7-e4 #
   1...c6-c5
       2.Se3*d5 #
   1...Sf7-d6
       2.Qg7-e5 #
   1...Sf7-e5
       2.Qg7*e5 #
   1...Sf7-g5
       2.Qg7-e5 #
   1...Sf7-h6
       2.Qg7-e5 #
   1...Sf7-h8
       2.Qg7-e5 #
   1...Sf7-d8
       2.Qg7-e5 #
#+end_example

So the winning move is *Nc2-e3*, which agrees with Lichess.  But now it's a
bit clearer /why/: It leaves Black in a [[https://en.wikipedia.org/wiki/Zugzwang][Zugzwang]] position such that any of
23 possible moves has a mating reply.  It's safe to say I would not have
worked that out.

Well, Popeye did what I asked it, but I still wasn't happy with the method.
The Popeye input syntax is quite verbose; I much prefer the FEN format used
by Lichess.  And I think the output could be summarized more succinctly, by
grouping the moves by mating reply.  Could I do better?

* Python Chess

I didn't find any other tools specifically for the mate-in-2 problem.  But
I /did/ find a Python [[https://python-chess.readthedocs.io/en/latest/index.html][chess]] module.  Its documentation says it can
manipulate chess boards and positions in various ways, make moves, detect
checkmate, and a bunch of other things.  Sounds good!  Let's have a go with
it.

First, let's see if we can get it to read my puzzle FEN position.

#+name: imports
#+begin_src python :results silent :exports none
  import sys
  import chess
  from collections import defaultdict
#+end_src

#+name: make-board
#+begin_src python :exports both
fen = "5K2/3PRnQB/2p5/3p4/5k2/7q/2N5/4N3"
board = chess.Board(fen)
print(board)
#+end_src

Running this, we get:

#+RESULTS: make-board
: . . . . . K . .
: . . . P R n Q B
: . . p . . . . .
: . . . p . . . .
: . . . . . k . .
: . . . . . . . q
: . . N . . . . .
: . . . . N . . .

Cute.  An ASCII board showing the position.  Digging into the docs a bit
more, it turns out that it can also write SVG files:

#+begin_src python :results silent
  from pathlib import Path
  from chess import svg

  def print_svg(board, filename):
      Path(filename).write_text(svg.board(board))

  print_svg(board, "fuddler.svg")
#+end_src

Here's what the resulting file looks like:

#+attr_html: :width 40% :align center
[[file:fuddler.svg]]

Much nicer!

Looking further at the docs, there's a ~Board~ property that looks very
useful: ~legal_moves~.  It yields all the legal moves from that board
position as ~Move~ objects.  There are also ~push()~ and ~pop()~ methods to
perform (and undo) moves on a board, modifying it in-place.  And finally,
there's an ~is_checkmate()~ method to see if the side to move on the
~Board~ is in checkmate.  This is looking promising!

The first thing to do is to make a way to iterate over the move tree which
(a) returns the move in a human-readable format, and (b) undoes the move
when analysis of that part of the tree is done.  Here's my attempt: the
~make_legal_move()~ iterator.  For each legal move it updates the board,
yields the move in [[https://en.wikipedia.org/wiki/Algebraic_notation_(chess)][SAN]] format, and undoes the move afterwards.

#+name: make_legal_move
#+begin_src python :results silent
  def make_legal_move(board):
      for move in board.legal_moves:
          try:
              san = board.san(move)
              board.push(move)
              yield san
          finally:
              board.pop()
#+end_src

Let's see if that works for the puzzle board.  It should produce a list of
valid first moves for White.

#+name: legal-moves-output
#+begin_src python :wrap example :exports both
  import textwrap

  moves = ", ".join(make_legal_move(board))
  print(textwrap.fill(moves))
#+end_src

And here's the result:

#+RESULTS: legal-moves-output
#+begin_example
Kg8, Ke8, Kxf7, Bg8, Bg6, Bf5, Be4, Bd3, Qh8, Qg8, Qxf7+, Qh6+, Qg6,
Qf6+, Qg5+, Qe5+, Qg4+, Qd4+, Qg3+, Qc3, Qg2, Qb2, Qg1, Qa1, Re8,
Rxf7+, Re6, Re5, Re4+, Re3, Re2, Nd4, Nb4, Ne3, Na3, Na1, Nf3, Nd3+,
Ng2+, d8=Q, d8=R, d8=B, d8=N
#+end_example

Wow, quite a lot of options!  Checking against the board, it does look like
these are all White's valid moves.

OK, the next problem is how to use this function to look ahead and find a
mate-in-2 solution to the puzzle.  After a few iterations and dead ends,
here's what I came up with:

#+name: mate_in_2
#+begin_src python :results silent
  def mate_in_2(board):
      # Look at all first moves for white.
      for move in make_legal_move(board):
          # Keep track of Black's replies, and White's mating moves.
          replies = {}

          # Does Black have a move that avoids mate?
          avoidmate = False

          # Check Black's replies.
          for reply in make_legal_move(board):
              # Is there a mating move from this position?
              canmate = False
              for mating_move in make_legal_move(board):
                  if board.is_checkmate():
                      replies[reply] = mating_move
                      canmate = True
                      break

              # If not, Black can escape.
              if not canmate:
                  avoidmate = True
                  break

          # If black can't avoid mate, it's a solution.
          if not avoidmate:
              yield move, replies
#+end_src

It takes a FEN position, and for each solution, yields a 2-tuple: the
winning move for White, and a ~dict~ of possible Black replies, each reply
mapped to the final mating move.  Let's use this to print out the solution
in a chess-style format:

#+name: mate-in-2-output
#+begin_src python :exports both
  board = chess.Board(fen)
  for move, replies in mate_in_2(board):
      print(f"1. {move}")
      for reply, mating_move in sorted(replies.items()):
          print(f"1. ... {reply:6} 2. {mating_move}")
#+end_src

Running this, we get:

#+RESULTS: mate-in-2-output
#+begin_example
1. Ne3
1. ... Nd6    2. Qe5#
1. ... Nd8    2. Qe5#
1. ... Ne5    2. Qxe5#
1. ... Ng5    2. Qe5#
1. ... Nh6    2. Qe5#
1. ... Nh8    2. Qe5#
1. ... Qe6    2. N3g2#
1. ... Qf1    2. Qg4#
1. ... Qf3    2. Nd3#
1. ... Qf5    2. N3g2#
1. ... Qg2    2. N3xg2#
1. ... Qg3    2. Qf6#
1. ... Qg4    2. Qxg4#
1. ... Qh1    2. Qg4#
1. ... Qh2    2. Qg4#
1. ... Qh4    2. N3g2#
1. ... Qh5    2. N3g2#
1. ... Qh6    2. N3g2#
1. ... Qxd7   2. N3g2#
1. ... Qxe3   2. Rxf7#
1. ... Qxh7   2. Qg4#
1. ... c5     2. Nxd5#
1. ... d4     2. Re4#
#+end_example

Hey, that's pretty nice, and it agrees with the Popeye output (apart from
ordering).  But I still think it would be nicer to group all the replies by
mating move.  Here's a function to do that on the replies returned by the
~mate_in_2~ function, and prettyprint them:

#+name: print_solution
#+begin_src python :results silent
  def print_solution(move, replies, separator=" "):
      print(f"1. {move}")

      # Group replies by mating move.
      mating_moves = defaultdict(list)
      for reply, mating_move in replies.items():
          mating_moves[mating_move].append(reply)

      # Build output lines.
      outputs = []
      for mating_move, replies in mating_moves.items():
          replytext = separator.join(replies)
          outputs.append([replytext, mating_move])

      # Print them.
      maxlen = max(len(text) for (text, move) in outputs)
      for replytext, mating_move in outputs:
          print("1. ... %-*s  2. %s" % (maxlen, replytext, mating_move))
#+end_src

Let's use this to print the example solution:

#+begin_src python :exports results
  board = chess.Board(fen)
  for move, replies in mate_in_2(board):
      print_solution(move, replies)
#+end_src

#+RESULTS:
#+begin_example
1. Ne3
1. ... Nh8 Nd8 Nh6 Nd6 Ng5       2. Qe5#
1. ... Ne5                       2. Qxe5#
1. ... Qxh7 Qh2 Qh1 Qf1          2. Qg4#
1. ... Qxd7 Qh6 Qe6 Qh5 Qf5 Qh4  2. N3g2#
1. ... Qg4                       2. Qxg4#
1. ... Qg3                       2. Qf6#
1. ... Qf3                       2. Nd3#
1. ... Qxe3                      2. Rxf7#
1. ... Qg2                       2. N3xg2#
1. ... c5                        2. Nxd5#
1. ... d4                        2. Re4#
#+end_example

And finally (for now, at least) I'm content.

* TODO Postscript

# Mention org mode, and link to org source
# https://git.sr.ht/~zondo/orgchess/tree/main/item/chess.org

* What next?                                                       :noexport:

** Creating a standalone solver script

All those Python Chess snippets can be put together to make a complete
python script for solving mate-in-2 chess puzzles.  We /could/
cut-and-paste them, but why bother when Org can do it automatically.  This
process is known as /tangling/.

For a tangled solver script, all that's missing is a main program to
invoke.  Here's a simple one which takes a list of FEN positions as
arguments, and for each one prints the board position and the mate-in-2
solution.

#+name: main
#+begin_src python :results silent
  def main(args=sys.argv[1:]):
      for fen in args:
          board = chess.Board(fen)
          print()
          print(board)
          for move, replies in mate_in_2(board):
              print()
              print_solution(move, replies)
#+end_src

Putting it all together, here's the complete script:

#+header :noweb yes
#+header :shebang "#! /usr/bin/env python"
#+begin_src python :tangle mate-in-2 :results silent
  """
  Mate-in-2 chess puzzle solver.
  """

  <<imports>>


  <<main>>


  <<mate_in_2>>


  <<make_legal_move>>


  <<print_solution>>


  if __name__ == "__main__":
      main()
#+end_src

Finally, a test to see if it works.  It'll need to be tangled first, so
that the file exists.

#+begin_src shell
  ./mate-in-2 5K2/3PRnQB/2p5/3p4/5k2/7q/2N5/4N3
#+end_src

#+RESULTS:
#+begin_example

. . . . . K . .
. . . P R n Q B
. . p . . . . .
. . . p . . . .
. . . . . k . .
. . . . . . . q
. . N . . . . .
. . . . N . . .

1. Ne3
1. ... Nh8 Nd8 Nh6 Nd6 Ng5       2. Qe5#
1. ... Ne5                       2. Qxe5#
1. ... Qxh7 Qh2 Qh1 Qf1          2. Qg4#
1. ... Qxd7 Qh6 Qe6 Qh5 Qf5 Qh4  2. N3g2#
1. ... Qg4                       2. Qxg4#
1. ... Qg3                       2. Qf6#
1. ... Qf3                       2. Nd3#
1. ... Qxe3                      2. Rxf7#
1. ... Qg2                       2. N3xg2#
1. ... c5                        2. Nxd5#
1. ... d4                        2. Re4#
#+end_example

** Printing the latest Fuddler solution

Here's a list of all the Fuddler puzzles I've gathered so far:

#+name: fuddler-puzzles
| 2018-04 | 8/8/3Nn1p1/6n1/R3p3/B2pk1K1/1R6/5B2    |
| 2018-06 | 6QB/7B/8/8/4pk1q/5p2/5P1p/7K           |
| 2018-07 | 3R4/8/KNkB4/8/2pp3n/4n3/6N1/7B         |
| 2018-08 | 8/3r4/3Qb3/4RN2/2k2n2/8/2P1NB2/2bK4    |
| 2018-09 | 4R3/nN1k2r1/3NpR2/1P6/8/3B4/K1Q5/8     |
| 2018-10 | 1Q6/8/2r5/P1k1N1R1/4P3/4b2r/K4N2/6B1   |
| 2018-11 | 2n5/n5Q1/4R3/1Pk2P2/8/P1N5/3N3b/5K2    |
| 2018-12 | R2rk3/4p2n/6p1/2nB4/6QB/b7/8/3K4       |
| 2019-01 | 3Q2n1/8/p7/r2pkP2/6n1/b2Rp1K1/8/1B6    |
| 2019-03 | 8/1R4nr/2Nk4/3P2R1/K2P4/7b/B7/5r2      |
| 2019-04 | 8/2B2p2/8/1pk2P1p/4QN1R/8/n7/2n2K2     |
| 2019-05 | 8/4Q2p/4R1pk/2b4p/7P/4R3/8/2B3K1       |
| 2019-06 | 8/2b5/6p1/8/2KPkp1R/R2N3Q/4b3/6B1      |
| 2019-07 | b3r3/8/5NB1/3Q2np/3R4/2B1k3/R5K1/8     |
| 2019-08 | 1n6/1N6/pR6/8/k2p4/6p1/1P3bQ1/3N3K     |
| 2019-09 | R1N2K2/2k5/4PB2/P1N5/Br6/3b4/8/3Q4     |
| 2019-10 | 4k1n1/3pP3/n2Q2P1/3N4/8/1p6/1K6/8      |
| 2019-11 | 8/8/2p1pQ2/r3N3/b2k4/3P4/1P1R1K2/7B    |
| 2019-12 | k3n3/qR2R3/4N3/2p5/2P5/2Q5/8/4K3       |
| 2020-01 | 8/1Q6/7p/4K1nk/7P/5P2/1p2n1N1/1B5N     |
| 2020-02 | b7/3Q4/8/2P1p3/4k3/6PB/1N3B1n/2nK4     |
| 2020-03 | 8/8/4p2p/Q6K/3bNkB1/4R3/5B2/8          |
| 2022-02 | 8/4K3/3Q4/5bR1/4k1p1/Rn6/3n4/3B2B1     |
| 2022-03 | 8/5p2/2N1bP2/1Q6/N1n1k3/8/8/4KRB1      |
| 2022-04 | 3R4/8/8/1N6/1Pk1r1nQ/K1N5/8/6b1        |
| 2022-06 | B7/1K6/2r2p2/3kp3/N1N3Q1/8/2R5/1n6     |
| 2022-07 | 1Q6/1P6/4N3/4Rp2/r3B2p/r3k3/8/2N1K3    |
| 2022-08 | 8/Q7/8/2p5/8/1n1R2pR/4PNKp/3Bk3        |
| 2022-09 | 3n2N1/5p2/3k1p2/2RP1B2/2K2p2/2BR4/8/8  |
| 2022-10 | 3R4/Q7/2k5/5n2/P3NK2/4p3/5P2/nq5B      |
| 2022-11 | 5K2/3PRnQB/2p5/3p4/5k2/7q/2N5/4N3      |
| 2022-12 | 8/2N1K1p1/4p1B1/4k3/6R1/4P2b/3n1N2/4n3 |
| 2023-01 | 8/1p1R4/2b5/1Qr1k1K1/4NN2/1n3P2/8/8    |
| 2023-02 | 5bb1/2K1p3/2p5/7r/k7/1q4R1/8/2QBB3     |

This snippet prints the board situation...

#+BEGIN_SRC python :var puzzles=fuddler-puzzles :results silent
  name, fen = puzzles[-1]
  board = chess.Board(fen)
  print_svg(board, "solved.svg")
#+end_src

#+attr_html: :width 40% :align center
[[file:solved.svg]]

...and this prints the solution:

#+BEGIN_SRC python
  print(name)
  print()

  for move, replies in mate_in_2(board):
      print_solution(move, replies)
#+END_SRC

#+RESULTS:
: 2023-02
: 
: 1. Qc3
: 1. ... Bh7 Bf7 Be6 Bc4 Bg7 Bh6 Rg5 Rf5 Re5 Rd5 Rc5 Qc2 Qxd1  2. Qb4#
: 1. ... Bd5 Rh8 Rh7 Rh6 Rh4 Rh3 Rh2 Rh1 c5 e5                 2. Qa5#
: 1. ... Rb5 Ka3                                               2. Qa1#
: 1. ... Ra5                                                   2. Qxa5#
: 1. ... Kb5                                                   2. Qxc6#
: 1. ... e6                                                    2. Qxb3#

** SVG move diagrams

I touched on the SVG output above, but did nothing with it.  But it can
also annotate positions with coloured arrows; it might be fun to try and
create a diagram illustrating a particular mating move, with all the
replies that lead to it.

** Making a game tree

Python Chess has a bunch of stuff for making game trees.  I might explore
that a bit further at some point.

* Footnotes

[fn:1] At first I thought this was a quirk of Popeye, but no, it's a
standard thing: the *S* is from the German for Knight, /Springer/.
 
# Local Variables:
# org-confirm-babel-evaluate: nil
# End:
